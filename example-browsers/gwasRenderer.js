// Generated by psc-bundle 0.10.2
var PS = {};
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Category = function (__superclass_Control$dotSemigroupoid$dotSemigroupoid_0, id) {
      this["__superclass_Control.Semigroupoid.Semigroupoid_0"] = __superclass_Control$dotSemigroupoid$dotSemigroupoid_0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Category = PS["Control.Category"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  };
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  };
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.setStrokeStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.strokeStyle = style;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
          return ctx;
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.r, a.start, a.end);
              return ctx;
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
          return ctx;
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
          return ctx;
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var withContext = function (ctx) {
      return function (action) {
          return function __do() {
              $foreign.save(ctx)();
              var v = action();
              $foreign.restore(ctx)();
              return v;
          };
      };
  };
  exports["withContext"] = withContext;
  exports["arc"] = $foreign.arc;
  exports["beginPath"] = $foreign.beginPath;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["stroke"] = $foreign.stroke;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
    "use strict";

  exports.log = Math.log;

  exports.ln10 = Math.LN10;

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Math"];
  exports["ln10"] = $foreign.ln10;
  exports["log"] = $foreign.log;
  exports["pi"] = $foreign.pi;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Boolean = PS["Data.Boolean"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($169) {
                  return Control_Apply.applySecond(dictApplicative["__superclass_Control.Apply.Apply_0"]())(f($169));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Traversable = PS["Data.Traversable"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var $$Math = PS["Math"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Foldable = PS["Data.Foldable"];
  var worldToCanvas = function (p) {
      return function (sf) {
          return {
              x: (p.x - sf.viewStart) / sf.bpPerPixel + 1000.0,
              y: sf.scaleY(p.y)
          };
      };
  };
  var logScale = function (height) {
      return function (y) {
          return ($$Math.log(y) / $$Math.ln10) * height;
      };
  };
  var drawGlyphs = function (gs) {
      return function (sf) {
          return function (ctx) {
              return Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(function (g) {
                  return g.glyphEff(sf)(ctx);
              })(gs);
          };
      };
  };
  var circlePos = function (p) {
      return function (r) {
          return function (sf) {
              var p$prime = worldToCanvas(p)(sf);
              return {
                  min: function (v) {
                      return p$prime.x - r - 988.0;
                  },
                  max: function (v) {
                      return (p$prime.x + r) - 982.0;
                  },
                  minY: function (v) {
                      return p$prime.y - r - 3.0;
                  },
                  maxY: function (v) {
                      return p$prime.y + r + 3.0;
                  }
              };
          };
      };
  };

  /**
 *  circleEff :: forall eff. Point -> Number -> ScaleFactor -> Context2D -> Eff (canvas :: CANVAS | eff) Unit
 */
  var circleEff = function (p) {
      return function (r) {
          return function (sf) {
              return function (ctx) {
                  return Graphics_Canvas.withContext(ctx)((function () {
                      var p$prime = worldToCanvas(p)(sf);
                      return function __do() {
                          Graphics_Canvas.beginPath(ctx)();
                          Graphics_Canvas.arc(ctx)({
                              x: p$prime.x,
                              y: p$prime.y,
                              r: r,
                              start: 0.0,
                              end: 2.0 * $$Math.pi
                          })();
                          Graphics_Canvas.stroke(ctx)();
                          return Data_Unit.unit;
                      };
                  })());
              };
          };
      };
  };
  var circle = function (p) {
      return function (r) {
          return function (sf) {
              return {
                  glyphEff: circleEff(p)(r),
                  glyphPos: circlePos(p)(r)(sf)
              };
          };
      };
  };
  exports["circle"] = circle;
  exports["circleEff"] = circleEff;
  exports["circlePos"] = circlePos;
  exports["drawGlyphs"] = drawGlyphs;
  exports["logScale"] = logScale;
  exports["worldToCanvas"] = worldToCanvas;
})(PS["Biodalliance.Glyph"] = PS["Biodalliance.Glyph"] || {});
(function(exports) {exports.initialize = function(tier) {
      return function() {
          // set padding (3 is default used by BD)
          tier.padding = 3;
          tier.scaleVertical = false; // set in default-renderer:427, used by feature-draw:paintToContext

          tier.glyphCacheOrigin = 0;

          // create subtiers
          tier.subtiers = [];
          tier.subtiers[0] = { glyphs: [] };
      };
  };

  exports.canvasContext = function(tier) {
      return function() {
          return tier.viewport.getContext("2d");
      };
  };

  exports.setHeight = function(tier) {
      return function(height) {
          return function () {
              tier.viewport.height = height;
              tier.layoutHeight = height;
              tier.updateHeight();

              tier.norigin = tier.browser.viewStart;

              tier.originHaxx = 0;
              tier.browser.arrangeTiers();
          };
      };
  };

  exports.features = function(tier) {
      return function() {
          return tier.currentFeatures;
      };
  };

  exports.scaleFactor = function(tier) {
      return function(scaleY) {
          return function() {
              var sf = { bpPerPixel: 1/tier.browser.scale,
                         viewStart: tier.browser.viewStart,
                         canvasHeight: tier.viewport.height,
                         scaleY: scaleY(tier.viewport.height)
                       };
              return sf;
          };
      };
  };

  exports.render = function(f) {
      f();
  };



  exports.setGlyphs2 = function(tier) {
      return function(glyphs) {
          return function() {
              glyphs.forEach(function(g) {
                  console.log(g);
                  var glyph = g.glyph.glyphPos;
                  glyph.feature = g.feature;
                  tier.subtiers[0].glyphs.push(glyph);
              });
              console.log(tier.subtiers[0]);
          };
      };
  };
})(PS["Biodalliance.Track"] = PS["Biodalliance.Track"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Biodalliance.Track"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Biodalliance_Glyph = PS["Biodalliance.Glyph"];
  exports["canvasContext"] = $foreign.canvasContext;
  exports["features"] = $foreign.features;
  exports["initialize"] = $foreign.initialize;
  exports["render"] = $foreign.render;
  exports["scaleFactor"] = $foreign.scaleFactor;
  exports["setGlyphs2"] = $foreign.setGlyphs2;
  exports["setHeight"] = $foreign.setHeight;
})(PS["Biodalliance.Track"] = PS["Biodalliance.Track"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Biodalliance_Glyph = PS["Biodalliance.Glyph"];
  var Biodalliance_Track = PS["Biodalliance.Track"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var gwasGlyph$prime = function (sf) {
      return function (f) {
          return {
              glyph: Biodalliance_Glyph.circle({
                  x: f.min,
                  y: f.score
              })(3.0)(sf),
              feature: f
          };
      };
  };
  var gwasPlotGlyphs$prime = function (sf) {
      return function (fs) {
          return Data_Functor.map(Data_Functor.functorArray)(gwasGlyph$prime(sf))(fs);
      };
  };
  var gwasGlyph = function (sf) {
      return function (v) {
          return Biodalliance_Glyph.circle({
              x: v.min,
              y: v.score
          })(3.0)(sf);
      };
  };
  var gwasPlotGlyphs = function (sf) {
      return function (fs) {
          return Data_Functor.map(Data_Functor.functorArray)(gwasGlyph(sf))(fs);
      };
  };
  var drawGwasPlot = function (config) {
      return function (tier) {
          return function __do() {
              Biodalliance_Track.initialize(tier)();
              Biodalliance_Track.setHeight(tier)(config.canvasHeight)();
              var v = Biodalliance_Track.scaleFactor(tier)(Biodalliance_Glyph.logScale)();
              var v1 = Biodalliance_Track.canvasContext(tier)();
              var v2 = Biodalliance_Track.features(tier)();
              var glyphs = gwasPlotGlyphs$prime(v)(v2);
              Biodalliance_Track.setGlyphs2(tier)(glyphs)();
              Graphics_Canvas.setStrokeStyle("#222222")(v1)();
              return Biodalliance_Glyph.drawGlyphs(Data_Functor.map(Data_Functor.functorArray)(function (g) {
                  return g.glyph;
              })(glyphs))(v)(v1)();
          };
      };
  };
  var createRenderer = function (config) {
      var drawTier = function ($12) {
          return Biodalliance_Track.render(drawGwasPlot(config)($12));
      };
      var renderTier = function (status, tier) {
          return drawTier(tier);
      };
      return {
          renderTier: renderTier,
          drawTier: drawTier
      };
  };
  exports["createRenderer"] = createRenderer;
  exports["drawGwasPlot"] = drawGwasPlot;
  exports["gwasGlyph"] = gwasGlyph;
  exports["gwasGlyph'"] = gwasGlyph$prime;
  exports["gwasPlotGlyphs"] = gwasPlotGlyphs;
  exports["gwasPlotGlyphs'"] = gwasPlotGlyphs$prime;
})(PS["Biodalliance.Renderer.GWAS"] = PS["Biodalliance.Renderer.GWAS"] || {});
